{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>byconaut</code>","text":"<p>Deprecation of <code>byconaut</code> dependency for <code>bycon</code> Installations</p> <p>Since the bycon v2.0 \"Taito City\" release, the <code>byconaut</code> project has been reduced to non-standard functionality. Importantly, \"beyond Beacon services\", installation support, example data and data import functions have been migrated into the <code>bycon</code> project itself. The <code>byconaut</code> project now mainly serves as a playground for temporary utilities and scripts making use of <code>bycon</code> functions for additional tasks.</p>"},{"location":"#installation","title":"Installation","text":"<p><code>byconaut</code> depends on the <code>bycon</code> package which can be downloaded from its repository. Please see the repository and the corresponding documentation site.</p> <p>While there is also a <code>pip</code> installation possible over <code>pip3 install bycon</code> this will not include the local configuration files necessary e.g. for processing the databases.</p>"},{"location":"#create-your-own-databases","title":"Create your own databases","text":""},{"location":"#core-data","title":"Core Data","text":"<p>A basic setup for a Beacon compatible database - as supported by the <code>bycon</code> package - consists of the core data collections mirroring the Beacon default data model:</p> <ul> <li><code>variants</code></li> <li><code>analyses</code> (which covers parameters from both Beacon <code>analysis</code> and <code>run</code> entity schemas)</li> <li><code>biosamples</code></li> <li><code>individuals</code></li> </ul> <p>Databases are implemented in an existing MongoDB setup using utility applications contained in the <code>importers</code> directory by importing data from tab-delimited data files. In principle, only 2 import files are needed for inserting and updating of records: * a file for the non-variant metadata<sup>1</sup> with specific header values, where as   the absolute minimum id values for the different entities have to be provided * a file for genomic variants, again with specific headers but also containing   the upstream ids for the corresponding analysis, biosample and individual</p>"},{"location":"#examples","title":"Examples","text":""},{"location":"#minimal-metadata-file","title":"Minimal metadata file","text":"<pre><code>individual_id   biosample_id    analysis_id\nBRCA-patient-001 brca-001  brca-001-cnv\nBRCA-patient-001 brca-001  brca-001-snv\nBRCA-patient-002 brca-002  brca-002-cnv\n</code></pre>"},{"location":"#variant-file","title":"Variant file","text":""},{"location":"#further-and-optional-procedures","title":"Further and optional procedures","text":"<ol> <li>Create database and variants collection</li> <li>update the local <code>bycon</code> installation for your database information andlocal parameters<ul> <li>database name(s)</li> <li><code>filter_definitions</code> for parameter mapping</li> </ul> </li> <li>Create metadata collections - <code>analyses</code>, <code>biosamples</code> and <code>individuals</code></li> <li>Create <code>statusmaps</code> and CNV statistics for the analyses collection<ul> <li>only relevant for CNV database use cases</li> </ul> </li> <li>Create the <code>collations</code> collection which uses <code>filter_definitions</code> and the    corresponding values to aggregate information for query matching, term expansion ...</li> <li>Create <code>frequencymaps</code> for binned CNV data<ul> <li>relies on existence of <code>statusmaps</code> in <code>analyses</code> and <code>collations</code></li> <li>only needed for CNV data</li> </ul> </li> </ol>"},{"location":"#data-maintenance-scripts","title":"Data maintenance scripts","text":"<p>Please see the helper apps documentation.</p> <ol> <li> <p>Metadata in biomedical genomics is \"everything but the sequence variation\"\u00a0\u21a9</p> </li> </ol>"},{"location":"applications/","title":"Helper Applications","text":"<p>The <code>byconaut</code> repository provides a number of helper applications with different types of functionalities, e.g.</p> <ul> <li>data I/O</li> <li>plotting (see plotting)</li> <li>database maintenance</li> <li>data transformation</li> </ul> <p>These applications are in some way used to populate or manage data resources for <code>bycon</code> driven implementations of the Beacon protokol (i.e. genomic data resources).</p>"},{"location":"applications/#plotting-apps","title":"Plotting Apps","text":"<p>For more information see the dedicated documentation page).</p>"},{"location":"applications/#data-transformation-database-maintenance","title":"Data transformation &amp; database maintenance","text":""},{"location":"applications/#analysesstatusmapsrefresher","title":"<code>analysesStatusmapsRefresher</code>","text":"<p>This is one of the housekeeping scripts which has to be run after CNV data has been added or modified in the database. It creates CNV status data for binned genome intervals, used for histogram generation, sample clustering etc., as well as some other statistics (e.g. CNV coverage per chromosomal arms ...).</p>"},{"location":"applications/#arguments","title":"Arguments","text":"<ul> <li><code>-d</code>, <code>--datasetIds</code> ... to select the dataset (only one per run)</li> <li><code>--filters</code> ... to (optionally) limit the processing to a subset of samples   (e.g. after a limited update)</li> </ul>"},{"location":"applications/#use","title":"Use","text":"<ul> <li><code>bin/analysesStatusmapsRefresher.py -d progenetix</code></li> <li><code>bin/analysesStatusmapsRefresher.py -d progenetix --filters \"pgx:icdom-81703\"</code></li> <li><code>bin/analysesStatusmapsRefresher.py -d cellz --filters \"cellosaurus:CVCL_0312\"</code></li> </ul>"},{"location":"applications/#utility-apps","title":"Utility apps","text":""},{"location":"applications/#iscnsegmenter","title":"<code>ISCNsegmenter</code>","text":"<p>This is a helper app to transform cytogenetic CGH annotations (rev ish) to the canonical tab-delimited <code>.pgxseg</code> segment file format.</p>"},{"location":"applications/#use_1","title":"Use","text":"<ul> <li><code>bin/ISCNsegmenter.py -i imports/ccghtest.tab -o exports/cghtest-with-histo.pgxseg</code></li> </ul>"},{"location":"changes-todo/","title":"Changes &amp; TODOs","text":"<p>Changes are documented in <code>bycon</code>.</p>"}]}